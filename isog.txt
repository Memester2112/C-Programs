#include<stdio.h>
#include<stdlib.h>
#include<math.h>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct tree
{
 int key;
 struct tree *L;
 struct tree *R;
}tree;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int BSTsame(tree *T1, tree *T2);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int* merge(int a[],int b[],int n,int m)
{
 int *c=(int *)malloc((n+m)*sizeof(int));
 for(int i=0;i<n;i++)
 { 
  c[i]=a[i];
 }
 for(int i=0;i<m;i++)
 {
  c[n+i]=b[i];
 }
 return c;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BSTins(tree *T,int x)
{
 tree * new_node=(tree *)malloc(sizeof(tree));
 new_node->L=NULL;
 new_node->R=NULL;
 new_node->key=x;
 int flag=0;//0 for left child and 1 for right child assignment
 tree * ptr;
 tree * temp;
 ptr=T;
 temp=T;
 if(T==NULL)
  new_node->key=x;
 else
 {
 while(ptr!=NULL)  
  {
   if(x > ptr->key)//look to right
   {
    temp=ptr;
    ptr=ptr->R;
    if (ptr==NULL) flag=1;
   }
   else if(x< ptr->key)
   {
    temp=ptr;
    ptr=ptr->L;
   }
  }
  
 }//else
 if(flag)
  temp->R=new_node;
 else
  temp->L=new_node;

}//bst fn

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int fact(int n)
{
 int nf=1;
 if(n==0) return 1;
 while(n>0)
  {
   nf=nf*n;
   n--;
  }
 return nf;  
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void inorder(tree * T)
{
 if(T==NULL)
  return;
 inorder(T->L);
 printf("%d ",T->key);
 inorder(T->R);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void preorder(tree * T)
{

 if(T==NULL)
  return;
 printf("%d ",T->key);
 preorder(T->L);
 preorder(T->R);
 
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void BSTfree(tree *T)
{
 if(T==NULL) return;
 BSTfree(T->R);
 BSTfree(T->L);
 free(T);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void BSTprn(tree * T)
{
 printf("\nINORDER:\n");
 inorder(T);
 printf("\nPREORDER\n");
 preorder(T);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int countseq(int a[],int n)
{
 if(n<=2) return 1; 
 int x;
 int *b;
 int *c;
 int l,r;l=0;r=0;
 b=(int *)malloc(n * sizeof(int));
 c=(int *)malloc(n * sizeof(int));
 for(int i=1;i<n;i++)
 {
  if(a[i]<a[0])
  {
   b[l]=a[i];l++;
  }
  else
  {
   c[r]=a[i];r++;
  }
 }

 int q=fact(n-1)/(fact(n-1-l)*fact(l));
 x=countseq(b,l)*countseq(c,r)*q;	

 return(x);
}//method countseq

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tree* BSTcons(int a[],int n)
{
 //root is created separately
 tree * root =(tree *)malloc(sizeof(tree));
 root->L=NULL;
 root->R=NULL;
 root->key=a[0];
 for(int i=1;i<n;i++)
 {
  BSTins(root,a[i]);
 }



 return(root);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int BSTsame(tree *T1, tree *T2)//returns 1 if same, 0 otherwise
{
 if(T1==NULL && T2==NULL)
  return 1;
 else if(T1==NULL && T2!=NULL)
  return 0;
 else if(T2==NULL && T1!=NULL)
  return 0;  
 else
 {
  if(T1->key==T2->key && BSTsame(T1->L,T2->L) && BSTsame(T1->R,T2->R) )
   return 1;
  else 
   return 0;
 }   
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int** findallseq(int a[],int n)
{
 int x;
 if(n<=2)
  {
   int **arr=(int **)malloc(sizeof(int *));
   arr[0]=(int *)malloc(n*sizeof(int));
   for(int i=0;i<n;i++)
    arr[0][i]=a[i];
   return arr;
  } 
 int *b;
 int *c;
 int l,r;l=0;r=0;
 b=(int *)malloc(n * sizeof(int));
 c=(int *)malloc(n * sizeof(int));
 for(int i=1;i<n;i++)
 {
  if(a[i]<a[0])
  {
   b[l]=a[i];l++;
  }
  else
  {
   c[r]=a[i];r++;
  }
 }
 int t=pow(2,l+r)-1;
 //int z=zeroes(l+r);
 int q=fact(n-1)/(fact(n-1-l)*fact(l));
 x=countseq(b,l)*countseq(c,r)*q;	
 

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int checkall(tree * T,int **L,int x,int n)
{
 int count=0;//number of non isogenic trees
 int c[n];
 for(int i=0;i<x;i++)
 {
  for(int j=0;j<n;j++)
  {
   c[j]=L[i][j];
  }
  tree * root = BSTcons(c,n);
  if(!BSTsame(T,root))
   count++;
  BSTfree(root); 
 }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main()
{
 int n;
 scanf("%d",&n);
 int a[n];
 for(int i=0;i<n;i++)
 {
  scanf("%d",&a[i]);
 }
 int x=countseq(a,n);
 printf("\nNo. of sequences :%d",x);
 tree * root=BSTcons(a,n);
 /*
 a[0]=9;
 tree * root2=BSTcons(a,n);
 int q=BSTsame(root1,root2);
 printf("\n q = %d\n",q); 
 */
 BSTprn(root);
 //int L[x][n]=findallseq(a,n);
 //checkall(root,L,x,n);

 return 0;
}
